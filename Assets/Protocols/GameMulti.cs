// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GameMulti.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Nhn.Gameflex.Sample.Protocol {

  /// <summary>Holder for reflection information generated from GameMulti.proto</summary>
  public static partial class GameMultiReflection {

    #region Descriptor
    /// <summary>File descriptor for GameMulti.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameMultiReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9HYW1lTXVsdGkucHJvdG8SIGNvbS5uaG4uZ2FtZWZsZXguc2FtcGxlLnBy",
            "b3RvY29sIjsKDFJvb21Vc2VyRGF0YRIKCgJpZBgBIAEoCRIQCghuaWNrTmFt",
            "ZRgCIAEoCRINCgVzY29yZRgDIAEoAyJTCg9UYXBCaXJkVXNlckRhdGESQAoI",
            "dXNlckRhdGEYASABKAsyLi5jb20ubmhuLmdhbWVmbGV4LnNhbXBsZS5wcm90",
            "b2NvbC5Sb29tVXNlckRhdGEiGwoKU2NvcmVVcE1zZxINCgVzY29yZRgBIAEo",
            "AyJdChNCcm9hZGNhc3RUYXBCaXJkTXNnEkYKC3RhcEJpcmREYXRhGAEgAygL",
            "MjEuY29tLm5obi5nYW1lZmxleC5zYW1wbGUucHJvdG9jb2wuVGFwQmlyZFVz",
            "ZXJEYXRhIjYKEVNuYWtlUG9zaXRpb25EYXRhEgsKA2lkeBgBIAEoBRIJCgF4",
            "GAIgASgFEgkKAXkYAyABKAUipAEKDVNuYWtlVXNlckRhdGESQAoIYmFzZURh",
            "dGEYASABKAsyLi5jb20ubmhuLmdhbWVmbGV4LnNhbXBsZS5wcm90b2NvbC5S",
            "b29tVXNlckRhdGESUQoUdXNlclBvc2l0aW9uTGlzdERhdGEYAiADKAsyMy5j",
            "b20ubmhuLmdhbWVmbGV4LnNhbXBsZS5wcm90b2NvbC5TbmFrZVBvc2l0aW9u",
            "RGF0YSKoAQoQU25ha2VHYW1lSW5mb01zZxITCgtib2FyZGVyTGVmdBgBIAEo",
            "BRIUCgxib2FyZGVyUmlnaHQYAiABKAUSFQoNYm9hcmRlckJvdHRvbRgDIAEo",
            "BRISCgpib2FyZGVyVG9wGAQgASgFEj4KBXVzZXJzGAUgAygLMi8uY29tLm5o",
            "bi5nYW1lZmxleC5zYW1wbGUucHJvdG9jb2wuU25ha2VVc2VyRGF0YSJnCgxT",
            "bmFrZUZvb2RNc2cSEAoIaXNEZWxldGUYASABKAgSRQoIZm9vZERhdGEYAiAB",
            "KAsyMy5jb20ubmhuLmdhbWVmbGV4LnNhbXBsZS5wcm90b2NvbC5TbmFrZVBv",
            "c2l0aW9uRGF0YSJRCgxTbmFrZVVzZXJNc2cSQQoIdXNlckRhdGEYASABKAsy",
            "Ly5jb20ubmhuLmdhbWVmbGV4LnNhbXBsZS5wcm90b2NvbC5TbmFrZVVzZXJE",
            "YXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Nhn.Gameflex.Sample.Protocol.RoomUserData), global::Com.Nhn.Gameflex.Sample.Protocol.RoomUserData.Parser, new[]{ "Id", "NickName", "Score" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Nhn.Gameflex.Sample.Protocol.TapBirdUserData), global::Com.Nhn.Gameflex.Sample.Protocol.TapBirdUserData.Parser, new[]{ "UserData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Nhn.Gameflex.Sample.Protocol.ScoreUpMsg), global::Com.Nhn.Gameflex.Sample.Protocol.ScoreUpMsg.Parser, new[]{ "Score" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Nhn.Gameflex.Sample.Protocol.BroadcastTapBirdMsg), global::Com.Nhn.Gameflex.Sample.Protocol.BroadcastTapBirdMsg.Parser, new[]{ "TapBirdData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Nhn.Gameflex.Sample.Protocol.SnakePositionData), global::Com.Nhn.Gameflex.Sample.Protocol.SnakePositionData.Parser, new[]{ "Idx", "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Nhn.Gameflex.Sample.Protocol.SnakeUserData), global::Com.Nhn.Gameflex.Sample.Protocol.SnakeUserData.Parser, new[]{ "BaseData", "UserPositionListData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Nhn.Gameflex.Sample.Protocol.SnakeGameInfoMsg), global::Com.Nhn.Gameflex.Sample.Protocol.SnakeGameInfoMsg.Parser, new[]{ "BoarderLeft", "BoarderRight", "BoarderBottom", "BoarderTop", "Users" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Nhn.Gameflex.Sample.Protocol.SnakeFoodMsg), global::Com.Nhn.Gameflex.Sample.Protocol.SnakeFoodMsg.Parser, new[]{ "IsDelete", "FoodData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Nhn.Gameflex.Sample.Protocol.SnakeUserMsg), global::Com.Nhn.Gameflex.Sample.Protocol.SnakeUserMsg.Parser, new[]{ "UserData" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RoomUserData : pb::IMessage<RoomUserData> {
    private static readonly pb::MessageParser<RoomUserData> _parser = new pb::MessageParser<RoomUserData>(() => new RoomUserData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomUserData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Nhn.Gameflex.Sample.Protocol.GameMultiReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomUserData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomUserData(RoomUserData other) : this() {
      id_ = other.id_;
      nickName_ = other.nickName_;
      score_ = other.score_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomUserData Clone() {
      return new RoomUserData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nickName" field.</summary>
    public const int NickNameFieldNumber = 2;
    private string nickName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private long score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomUserData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomUserData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (NickName != other.NickName) return false;
      if (Score != other.Score) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (NickName.Length != 0) hash ^= NickName.GetHashCode();
      if (Score != 0L) hash ^= Score.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NickName);
      }
      if (Score != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Score);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (Score != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Score);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomUserData other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.NickName.Length != 0) {
        NickName = other.NickName;
      }
      if (other.Score != 0L) {
        Score = other.Score;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            NickName = input.ReadString();
            break;
          }
          case 24: {
            Score = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Tap Bird
  /// </summary>
  public sealed partial class TapBirdUserData : pb::IMessage<TapBirdUserData> {
    private static readonly pb::MessageParser<TapBirdUserData> _parser = new pb::MessageParser<TapBirdUserData>(() => new TapBirdUserData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TapBirdUserData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Nhn.Gameflex.Sample.Protocol.GameMultiReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TapBirdUserData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TapBirdUserData(TapBirdUserData other) : this() {
      userData_ = other.userData_ != null ? other.userData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TapBirdUserData Clone() {
      return new TapBirdUserData(this);
    }

    /// <summary>Field number for the "userData" field.</summary>
    public const int UserDataFieldNumber = 1;
    private global::Com.Nhn.Gameflex.Sample.Protocol.RoomUserData userData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Nhn.Gameflex.Sample.Protocol.RoomUserData UserData {
      get { return userData_; }
      set {
        userData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TapBirdUserData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TapBirdUserData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserData, other.UserData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (userData_ != null) hash ^= UserData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (userData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TapBirdUserData other) {
      if (other == null) {
        return;
      }
      if (other.userData_ != null) {
        if (userData_ == null) {
          userData_ = new global::Com.Nhn.Gameflex.Sample.Protocol.RoomUserData();
        }
        UserData.MergeFrom(other.UserData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (userData_ == null) {
              userData_ = new global::Com.Nhn.Gameflex.Sample.Protocol.RoomUserData();
            }
            input.ReadMessage(userData_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScoreUpMsg : pb::IMessage<ScoreUpMsg> {
    private static readonly pb::MessageParser<ScoreUpMsg> _parser = new pb::MessageParser<ScoreUpMsg>(() => new ScoreUpMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScoreUpMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Nhn.Gameflex.Sample.Protocol.GameMultiReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreUpMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreUpMsg(ScoreUpMsg other) : this() {
      score_ = other.score_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreUpMsg Clone() {
      return new ScoreUpMsg(this);
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 1;
    private long score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScoreUpMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScoreUpMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Score != other.Score) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Score != 0L) hash ^= Score.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Score != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Score);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Score != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Score);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScoreUpMsg other) {
      if (other == null) {
        return;
      }
      if (other.Score != 0L) {
        Score = other.Score;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Score = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BroadcastTapBirdMsg : pb::IMessage<BroadcastTapBirdMsg> {
    private static readonly pb::MessageParser<BroadcastTapBirdMsg> _parser = new pb::MessageParser<BroadcastTapBirdMsg>(() => new BroadcastTapBirdMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BroadcastTapBirdMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Nhn.Gameflex.Sample.Protocol.GameMultiReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadcastTapBirdMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadcastTapBirdMsg(BroadcastTapBirdMsg other) : this() {
      tapBirdData_ = other.tapBirdData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadcastTapBirdMsg Clone() {
      return new BroadcastTapBirdMsg(this);
    }

    /// <summary>Field number for the "tapBirdData" field.</summary>
    public const int TapBirdDataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.Nhn.Gameflex.Sample.Protocol.TapBirdUserData> _repeated_tapBirdData_codec
        = pb::FieldCodec.ForMessage(10, global::Com.Nhn.Gameflex.Sample.Protocol.TapBirdUserData.Parser);
    private readonly pbc::RepeatedField<global::Com.Nhn.Gameflex.Sample.Protocol.TapBirdUserData> tapBirdData_ = new pbc::RepeatedField<global::Com.Nhn.Gameflex.Sample.Protocol.TapBirdUserData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Nhn.Gameflex.Sample.Protocol.TapBirdUserData> TapBirdData {
      get { return tapBirdData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BroadcastTapBirdMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BroadcastTapBirdMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tapBirdData_.Equals(other.tapBirdData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tapBirdData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tapBirdData_.WriteTo(output, _repeated_tapBirdData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tapBirdData_.CalculateSize(_repeated_tapBirdData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BroadcastTapBirdMsg other) {
      if (other == null) {
        return;
      }
      tapBirdData_.Add(other.tapBirdData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tapBirdData_.AddEntriesFrom(input, _repeated_tapBirdData_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Snake
  /// 위치 데이터
  /// </summary>
  public sealed partial class SnakePositionData : pb::IMessage<SnakePositionData> {
    private static readonly pb::MessageParser<SnakePositionData> _parser = new pb::MessageParser<SnakePositionData>(() => new SnakePositionData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SnakePositionData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Nhn.Gameflex.Sample.Protocol.GameMultiReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnakePositionData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnakePositionData(SnakePositionData other) : this() {
      idx_ = other.idx_;
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnakePositionData Clone() {
      return new SnakePositionData(this);
    }

    /// <summary>Field number for the "idx" field.</summary>
    public const int IdxFieldNumber = 1;
    private int idx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Idx {
      get { return idx_; }
      set {
        idx_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SnakePositionData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SnakePositionData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Idx != other.Idx) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Idx != 0) hash ^= Idx.GetHashCode();
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Idx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Idx);
      }
      if (X != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Idx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Idx);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SnakePositionData other) {
      if (other == null) {
        return;
      }
      if (other.Idx != 0) {
        Idx = other.Idx;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Idx = input.ReadInt32();
            break;
          }
          case 16: {
            X = input.ReadInt32();
            break;
          }
          case 24: {
            Y = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 유저 테이터
  /// </summary>
  public sealed partial class SnakeUserData : pb::IMessage<SnakeUserData> {
    private static readonly pb::MessageParser<SnakeUserData> _parser = new pb::MessageParser<SnakeUserData>(() => new SnakeUserData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SnakeUserData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Nhn.Gameflex.Sample.Protocol.GameMultiReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnakeUserData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnakeUserData(SnakeUserData other) : this() {
      baseData_ = other.baseData_ != null ? other.baseData_.Clone() : null;
      userPositionListData_ = other.userPositionListData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnakeUserData Clone() {
      return new SnakeUserData(this);
    }

    /// <summary>Field number for the "baseData" field.</summary>
    public const int BaseDataFieldNumber = 1;
    private global::Com.Nhn.Gameflex.Sample.Protocol.RoomUserData baseData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Nhn.Gameflex.Sample.Protocol.RoomUserData BaseData {
      get { return baseData_; }
      set {
        baseData_ = value;
      }
    }

    /// <summary>Field number for the "userPositionListData" field.</summary>
    public const int UserPositionListDataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Nhn.Gameflex.Sample.Protocol.SnakePositionData> _repeated_userPositionListData_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Nhn.Gameflex.Sample.Protocol.SnakePositionData.Parser);
    private readonly pbc::RepeatedField<global::Com.Nhn.Gameflex.Sample.Protocol.SnakePositionData> userPositionListData_ = new pbc::RepeatedField<global::Com.Nhn.Gameflex.Sample.Protocol.SnakePositionData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Nhn.Gameflex.Sample.Protocol.SnakePositionData> UserPositionListData {
      get { return userPositionListData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SnakeUserData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SnakeUserData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseData, other.BaseData)) return false;
      if(!userPositionListData_.Equals(other.userPositionListData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseData_ != null) hash ^= BaseData.GetHashCode();
      hash ^= userPositionListData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseData);
      }
      userPositionListData_.WriteTo(output, _repeated_userPositionListData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseData);
      }
      size += userPositionListData_.CalculateSize(_repeated_userPositionListData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SnakeUserData other) {
      if (other == null) {
        return;
      }
      if (other.baseData_ != null) {
        if (baseData_ == null) {
          baseData_ = new global::Com.Nhn.Gameflex.Sample.Protocol.RoomUserData();
        }
        BaseData.MergeFrom(other.BaseData);
      }
      userPositionListData_.Add(other.userPositionListData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (baseData_ == null) {
              baseData_ = new global::Com.Nhn.Gameflex.Sample.Protocol.RoomUserData();
            }
            input.ReadMessage(baseData_);
            break;
          }
          case 18: {
            userPositionListData_.AddEntriesFrom(input, _repeated_userPositionListData_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 최초 게임 입장시 게임 데이터 S to C
  /// </summary>
  public sealed partial class SnakeGameInfoMsg : pb::IMessage<SnakeGameInfoMsg> {
    private static readonly pb::MessageParser<SnakeGameInfoMsg> _parser = new pb::MessageParser<SnakeGameInfoMsg>(() => new SnakeGameInfoMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SnakeGameInfoMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Nhn.Gameflex.Sample.Protocol.GameMultiReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnakeGameInfoMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnakeGameInfoMsg(SnakeGameInfoMsg other) : this() {
      boarderLeft_ = other.boarderLeft_;
      boarderRight_ = other.boarderRight_;
      boarderBottom_ = other.boarderBottom_;
      boarderTop_ = other.boarderTop_;
      users_ = other.users_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnakeGameInfoMsg Clone() {
      return new SnakeGameInfoMsg(this);
    }

    /// <summary>Field number for the "boarderLeft" field.</summary>
    public const int BoarderLeftFieldNumber = 1;
    private int boarderLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoarderLeft {
      get { return boarderLeft_; }
      set {
        boarderLeft_ = value;
      }
    }

    /// <summary>Field number for the "boarderRight" field.</summary>
    public const int BoarderRightFieldNumber = 2;
    private int boarderRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoarderRight {
      get { return boarderRight_; }
      set {
        boarderRight_ = value;
      }
    }

    /// <summary>Field number for the "boarderBottom" field.</summary>
    public const int BoarderBottomFieldNumber = 3;
    private int boarderBottom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoarderBottom {
      get { return boarderBottom_; }
      set {
        boarderBottom_ = value;
      }
    }

    /// <summary>Field number for the "boarderTop" field.</summary>
    public const int BoarderTopFieldNumber = 4;
    private int boarderTop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoarderTop {
      get { return boarderTop_; }
      set {
        boarderTop_ = value;
      }
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Com.Nhn.Gameflex.Sample.Protocol.SnakeUserData> _repeated_users_codec
        = pb::FieldCodec.ForMessage(42, global::Com.Nhn.Gameflex.Sample.Protocol.SnakeUserData.Parser);
    private readonly pbc::RepeatedField<global::Com.Nhn.Gameflex.Sample.Protocol.SnakeUserData> users_ = new pbc::RepeatedField<global::Com.Nhn.Gameflex.Sample.Protocol.SnakeUserData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Nhn.Gameflex.Sample.Protocol.SnakeUserData> Users {
      get { return users_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SnakeGameInfoMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SnakeGameInfoMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BoarderLeft != other.BoarderLeft) return false;
      if (BoarderRight != other.BoarderRight) return false;
      if (BoarderBottom != other.BoarderBottom) return false;
      if (BoarderTop != other.BoarderTop) return false;
      if(!users_.Equals(other.users_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BoarderLeft != 0) hash ^= BoarderLeft.GetHashCode();
      if (BoarderRight != 0) hash ^= BoarderRight.GetHashCode();
      if (BoarderBottom != 0) hash ^= BoarderBottom.GetHashCode();
      if (BoarderTop != 0) hash ^= BoarderTop.GetHashCode();
      hash ^= users_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BoarderLeft != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BoarderLeft);
      }
      if (BoarderRight != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoarderRight);
      }
      if (BoarderBottom != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BoarderBottom);
      }
      if (BoarderTop != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BoarderTop);
      }
      users_.WriteTo(output, _repeated_users_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BoarderLeft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoarderLeft);
      }
      if (BoarderRight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoarderRight);
      }
      if (BoarderBottom != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoarderBottom);
      }
      if (BoarderTop != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoarderTop);
      }
      size += users_.CalculateSize(_repeated_users_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SnakeGameInfoMsg other) {
      if (other == null) {
        return;
      }
      if (other.BoarderLeft != 0) {
        BoarderLeft = other.BoarderLeft;
      }
      if (other.BoarderRight != 0) {
        BoarderRight = other.BoarderRight;
      }
      if (other.BoarderBottom != 0) {
        BoarderBottom = other.BoarderBottom;
      }
      if (other.BoarderTop != 0) {
        BoarderTop = other.BoarderTop;
      }
      users_.Add(other.users_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BoarderLeft = input.ReadInt32();
            break;
          }
          case 16: {
            BoarderRight = input.ReadInt32();
            break;
          }
          case 24: {
            BoarderBottom = input.ReadInt32();
            break;
          }
          case 32: {
            BoarderTop = input.ReadInt32();
            break;
          }
          case 42: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SnakeFoodMsg : pb::IMessage<SnakeFoodMsg> {
    private static readonly pb::MessageParser<SnakeFoodMsg> _parser = new pb::MessageParser<SnakeFoodMsg>(() => new SnakeFoodMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SnakeFoodMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Nhn.Gameflex.Sample.Protocol.GameMultiReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnakeFoodMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnakeFoodMsg(SnakeFoodMsg other) : this() {
      isDelete_ = other.isDelete_;
      foodData_ = other.foodData_ != null ? other.foodData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnakeFoodMsg Clone() {
      return new SnakeFoodMsg(this);
    }

    /// <summary>Field number for the "isDelete" field.</summary>
    public const int IsDeleteFieldNumber = 1;
    private bool isDelete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDelete {
      get { return isDelete_; }
      set {
        isDelete_ = value;
      }
    }

    /// <summary>Field number for the "foodData" field.</summary>
    public const int FoodDataFieldNumber = 2;
    private global::Com.Nhn.Gameflex.Sample.Protocol.SnakePositionData foodData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Nhn.Gameflex.Sample.Protocol.SnakePositionData FoodData {
      get { return foodData_; }
      set {
        foodData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SnakeFoodMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SnakeFoodMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsDelete != other.IsDelete) return false;
      if (!object.Equals(FoodData, other.FoodData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsDelete != false) hash ^= IsDelete.GetHashCode();
      if (foodData_ != null) hash ^= FoodData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsDelete != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsDelete);
      }
      if (foodData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FoodData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsDelete != false) {
        size += 1 + 1;
      }
      if (foodData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FoodData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SnakeFoodMsg other) {
      if (other == null) {
        return;
      }
      if (other.IsDelete != false) {
        IsDelete = other.IsDelete;
      }
      if (other.foodData_ != null) {
        if (foodData_ == null) {
          foodData_ = new global::Com.Nhn.Gameflex.Sample.Protocol.SnakePositionData();
        }
        FoodData.MergeFrom(other.FoodData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsDelete = input.ReadBool();
            break;
          }
          case 18: {
            if (foodData_ == null) {
              foodData_ = new global::Com.Nhn.Gameflex.Sample.Protocol.SnakePositionData();
            }
            input.ReadMessage(foodData_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 유저가 움직일때
  /// </summary>
  public sealed partial class SnakeUserMsg : pb::IMessage<SnakeUserMsg> {
    private static readonly pb::MessageParser<SnakeUserMsg> _parser = new pb::MessageParser<SnakeUserMsg>(() => new SnakeUserMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SnakeUserMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Nhn.Gameflex.Sample.Protocol.GameMultiReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnakeUserMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnakeUserMsg(SnakeUserMsg other) : this() {
      userData_ = other.userData_ != null ? other.userData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnakeUserMsg Clone() {
      return new SnakeUserMsg(this);
    }

    /// <summary>Field number for the "userData" field.</summary>
    public const int UserDataFieldNumber = 1;
    private global::Com.Nhn.Gameflex.Sample.Protocol.SnakeUserData userData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Nhn.Gameflex.Sample.Protocol.SnakeUserData UserData {
      get { return userData_; }
      set {
        userData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SnakeUserMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SnakeUserMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserData, other.UserData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (userData_ != null) hash ^= UserData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (userData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SnakeUserMsg other) {
      if (other == null) {
        return;
      }
      if (other.userData_ != null) {
        if (userData_ == null) {
          userData_ = new global::Com.Nhn.Gameflex.Sample.Protocol.SnakeUserData();
        }
        UserData.MergeFrom(other.UserData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (userData_ == null) {
              userData_ = new global::Com.Nhn.Gameflex.Sample.Protocol.SnakeUserData();
            }
            input.ReadMessage(userData_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
