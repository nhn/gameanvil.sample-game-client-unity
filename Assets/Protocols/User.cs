// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: User.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Nhn.Tardis.Sample.Protocol {

  /// <summary>Holder for reflection information generated from User.proto</summary>
  public static partial class UserReflection {

    #region Descriptor
    /// <summary>File descriptor for User.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UserReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpVc2VyLnByb3RvEh5jb20ubmhuLnRhcmRpcy5zYW1wbGUucHJvdG9jb2wa",
            "DFJlc3VsdC5wcm90byKLAQoIVXNlckRhdGESEAoIbmlja25hbWUYASABKAkS",
            "DQoFaGVhcnQYAiABKAUSDAoEY29pbhgDIAEoAxIMCgRydWJ5GAQgASgDEg0K",
            "BWxldmVsGAUgASgFEgsKA2V4cBgGIAEoAxIRCgloaWdoU2NvcmUYByABKAMS",
            "EwoLY3VycmVudERlY2sYCCABKAkiYwoOU2h1ZmZsZURlY2tSZXESQgoMY3Vy",
            "cmVuY3lUeXBlGAEgASgOMiwuY29tLm5obi50YXJkaXMuc2FtcGxlLnByb3Rv",
            "Y29sLkN1cnJlbmN5VHlwZRINCgV1c2FnZRgCIAEoAyKHAQoOU2h1ZmZsZURl",
            "Y2tSZXMSPQoKcmVzdWx0Q29kZRgBIAEoDjIpLmNvbS5uaG4udGFyZGlzLnNh",
            "bXBsZS5wcm90b2NvbC5FcnJvckNvZGUSDAoEZGVjaxgCIAEoCRITCgtiYWxh",
            "bmNlQ29pbhgDIAEoAxITCgtiYWxhbmNlUnVieRgEIAEoAypHCgxDdXJyZW5j",
            "eVR5cGUSEQoNQ1VSUkVOQ1lfTk9ORRAAEhEKDUNVUlJFTkNZX0NPSU4QARIR",
            "Cg1DVVJSRU5DWV9SVUJZEAJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Com.Nhn.Tardis.Sample.Protocol.ResultReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Com.Nhn.Tardis.Sample.Protocol.CurrencyType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Nhn.Tardis.Sample.Protocol.UserData), global::Com.Nhn.Tardis.Sample.Protocol.UserData.Parser, new[]{ "Nickname", "Heart", "Coin", "Ruby", "Level", "Exp", "HighScore", "CurrentDeck" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Nhn.Tardis.Sample.Protocol.ShuffleDeckReq), global::Com.Nhn.Tardis.Sample.Protocol.ShuffleDeckReq.Parser, new[]{ "CurrencyType", "Usage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Nhn.Tardis.Sample.Protocol.ShuffleDeckRes), global::Com.Nhn.Tardis.Sample.Protocol.ShuffleDeckRes.Parser, new[]{ "ResultCode", "Deck", "BalanceCoin", "BalanceRuby" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum CurrencyType {
    [pbr::OriginalName("CURRENCY_NONE")] CurrencyNone = 0,
    [pbr::OriginalName("CURRENCY_COIN")] CurrencyCoin = 1,
    [pbr::OriginalName("CURRENCY_RUBY")] CurrencyRuby = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 유저 데이터
  /// </summary>
  public sealed partial class UserData : pb::IMessage<UserData> {
    private static readonly pb::MessageParser<UserData> _parser = new pb::MessageParser<UserData>(() => new UserData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Nhn.Tardis.Sample.Protocol.UserReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserData(UserData other) : this() {
      nickname_ = other.nickname_;
      heart_ = other.heart_;
      coin_ = other.coin_;
      ruby_ = other.ruby_;
      level_ = other.level_;
      exp_ = other.exp_;
      highScore_ = other.highScore_;
      currentDeck_ = other.currentDeck_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserData Clone() {
      return new UserData(this);
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 1;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "heart" field.</summary>
    public const int HeartFieldNumber = 2;
    private int heart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Heart {
      get { return heart_; }
      set {
        heart_ = value;
      }
    }

    /// <summary>Field number for the "coin" field.</summary>
    public const int CoinFieldNumber = 3;
    private long coin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    /// <summary>Field number for the "ruby" field.</summary>
    public const int RubyFieldNumber = 4;
    private long ruby_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Ruby {
      get { return ruby_; }
      set {
        ruby_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 5;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 6;
    private long exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "highScore" field.</summary>
    public const int HighScoreFieldNumber = 7;
    private long highScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HighScore {
      get { return highScore_; }
      set {
        highScore_ = value;
      }
    }

    /// <summary>Field number for the "currentDeck" field.</summary>
    public const int CurrentDeckFieldNumber = 8;
    private string currentDeck_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentDeck {
      get { return currentDeck_; }
      set {
        currentDeck_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Nickname != other.Nickname) return false;
      if (Heart != other.Heart) return false;
      if (Coin != other.Coin) return false;
      if (Ruby != other.Ruby) return false;
      if (Level != other.Level) return false;
      if (Exp != other.Exp) return false;
      if (HighScore != other.HighScore) return false;
      if (CurrentDeck != other.CurrentDeck) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (Heart != 0) hash ^= Heart.GetHashCode();
      if (Coin != 0L) hash ^= Coin.GetHashCode();
      if (Ruby != 0L) hash ^= Ruby.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Exp != 0L) hash ^= Exp.GetHashCode();
      if (HighScore != 0L) hash ^= HighScore.GetHashCode();
      if (CurrentDeck.Length != 0) hash ^= CurrentDeck.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Nickname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Nickname);
      }
      if (Heart != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Heart);
      }
      if (Coin != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Coin);
      }
      if (Ruby != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Ruby);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Level);
      }
      if (Exp != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Exp);
      }
      if (HighScore != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(HighScore);
      }
      if (CurrentDeck.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CurrentDeck);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (Heart != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Heart);
      }
      if (Coin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Coin);
      }
      if (Ruby != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Ruby);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Exp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Exp);
      }
      if (HighScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HighScore);
      }
      if (CurrentDeck.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentDeck);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserData other) {
      if (other == null) {
        return;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.Heart != 0) {
        Heart = other.Heart;
      }
      if (other.Coin != 0L) {
        Coin = other.Coin;
      }
      if (other.Ruby != 0L) {
        Ruby = other.Ruby;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Exp != 0L) {
        Exp = other.Exp;
      }
      if (other.HighScore != 0L) {
        HighScore = other.HighScore;
      }
      if (other.CurrentDeck.Length != 0) {
        CurrentDeck = other.CurrentDeck;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Nickname = input.ReadString();
            break;
          }
          case 16: {
            Heart = input.ReadInt32();
            break;
          }
          case 24: {
            Coin = input.ReadInt64();
            break;
          }
          case 32: {
            Ruby = input.ReadInt64();
            break;
          }
          case 40: {
            Level = input.ReadInt32();
            break;
          }
          case 48: {
            Exp = input.ReadInt64();
            break;
          }
          case 56: {
            HighScore = input.ReadInt64();
            break;
          }
          case 66: {
            CurrentDeck = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShuffleDeckReq : pb::IMessage<ShuffleDeckReq> {
    private static readonly pb::MessageParser<ShuffleDeckReq> _parser = new pb::MessageParser<ShuffleDeckReq>(() => new ShuffleDeckReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShuffleDeckReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Nhn.Tardis.Sample.Protocol.UserReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShuffleDeckReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShuffleDeckReq(ShuffleDeckReq other) : this() {
      currencyType_ = other.currencyType_;
      usage_ = other.usage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShuffleDeckReq Clone() {
      return new ShuffleDeckReq(this);
    }

    /// <summary>Field number for the "currencyType" field.</summary>
    public const int CurrencyTypeFieldNumber = 1;
    private global::Com.Nhn.Tardis.Sample.Protocol.CurrencyType currencyType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Nhn.Tardis.Sample.Protocol.CurrencyType CurrencyType {
      get { return currencyType_; }
      set {
        currencyType_ = value;
      }
    }

    /// <summary>Field number for the "usage" field.</summary>
    public const int UsageFieldNumber = 2;
    private long usage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Usage {
      get { return usage_; }
      set {
        usage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShuffleDeckReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShuffleDeckReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrencyType != other.CurrencyType) return false;
      if (Usage != other.Usage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrencyType != 0) hash ^= CurrencyType.GetHashCode();
      if (Usage != 0L) hash ^= Usage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrencyType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CurrencyType);
      }
      if (Usage != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Usage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrencyType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CurrencyType);
      }
      if (Usage != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Usage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShuffleDeckReq other) {
      if (other == null) {
        return;
      }
      if (other.CurrencyType != 0) {
        CurrencyType = other.CurrencyType;
      }
      if (other.Usage != 0L) {
        Usage = other.Usage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            currencyType_ = (global::Com.Nhn.Tardis.Sample.Protocol.CurrencyType) input.ReadEnum();
            break;
          }
          case 16: {
            Usage = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShuffleDeckRes : pb::IMessage<ShuffleDeckRes> {
    private static readonly pb::MessageParser<ShuffleDeckRes> _parser = new pb::MessageParser<ShuffleDeckRes>(() => new ShuffleDeckRes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShuffleDeckRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Nhn.Tardis.Sample.Protocol.UserReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShuffleDeckRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShuffleDeckRes(ShuffleDeckRes other) : this() {
      resultCode_ = other.resultCode_;
      deck_ = other.deck_;
      balanceCoin_ = other.balanceCoin_;
      balanceRuby_ = other.balanceRuby_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShuffleDeckRes Clone() {
      return new ShuffleDeckRes(this);
    }

    /// <summary>Field number for the "resultCode" field.</summary>
    public const int ResultCodeFieldNumber = 1;
    private global::Com.Nhn.Tardis.Sample.Protocol.ErrorCode resultCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Nhn.Tardis.Sample.Protocol.ErrorCode ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    /// <summary>Field number for the "deck" field.</summary>
    public const int DeckFieldNumber = 2;
    private string deck_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Deck {
      get { return deck_; }
      set {
        deck_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "balanceCoin" field.</summary>
    public const int BalanceCoinFieldNumber = 3;
    private long balanceCoin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BalanceCoin {
      get { return balanceCoin_; }
      set {
        balanceCoin_ = value;
      }
    }

    /// <summary>Field number for the "balanceRuby" field.</summary>
    public const int BalanceRubyFieldNumber = 4;
    private long balanceRuby_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BalanceRuby {
      get { return balanceRuby_; }
      set {
        balanceRuby_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShuffleDeckRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShuffleDeckRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResultCode != other.ResultCode) return false;
      if (Deck != other.Deck) return false;
      if (BalanceCoin != other.BalanceCoin) return false;
      if (BalanceRuby != other.BalanceRuby) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      if (Deck.Length != 0) hash ^= Deck.GetHashCode();
      if (BalanceCoin != 0L) hash ^= BalanceCoin.GetHashCode();
      if (BalanceRuby != 0L) hash ^= BalanceRuby.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResultCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ResultCode);
      }
      if (Deck.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Deck);
      }
      if (BalanceCoin != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BalanceCoin);
      }
      if (BalanceRuby != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(BalanceRuby);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResultCode);
      }
      if (Deck.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Deck);
      }
      if (BalanceCoin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BalanceCoin);
      }
      if (BalanceRuby != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BalanceRuby);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShuffleDeckRes other) {
      if (other == null) {
        return;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
      if (other.Deck.Length != 0) {
        Deck = other.Deck;
      }
      if (other.BalanceCoin != 0L) {
        BalanceCoin = other.BalanceCoin;
      }
      if (other.BalanceRuby != 0L) {
        BalanceRuby = other.BalanceRuby;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            resultCode_ = (global::Com.Nhn.Tardis.Sample.Protocol.ErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            Deck = input.ReadString();
            break;
          }
          case 24: {
            BalanceCoin = input.ReadInt64();
            break;
          }
          case 32: {
            BalanceRuby = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
